<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Secret √âcole Zakaria</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background: #f9f9f9;
      color: #222;
    }
    h1, h2, h3 {
      text-align: center;
    }
    table {
      width: 100%;
      max-width: 700px;
      margin: 20px auto;
      border-collapse: collapse;
      background: white;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    th, td {
      padding: 10px;
      border: 1px solid #ccc;
      text-align: center;
    }
    input[type="number"], input[type="text"], input[type="password"], input[type="time"] {
      padding: 5px;
      border-radius: 4px;
      border: 1px solid #ccc;
      text-align: center;
    }
    input[type="number"] {
      width: 60px;
    }
    .notes-container input {
      width: 50px;
      margin: 2px;
    }
    #resultat, #totaux {
      text-align: center;
      max-width: 700px;
      margin: 10px auto;
      font-weight: bold;
    }
    #resultat {
      font-size: 1.3em;
      color: #ff6600;
    }
    button {
      display: block;
      margin: 15px auto;
      padding: 10px 25px;
      background-color: #ff6600;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1em;
    }
    button:hover {
      background-color: #e55b00;
    }
    #loginForm {
      max-width: 400px;
      margin: 80px auto;
      background: white;
      padding: 25px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      border-radius: 8px;
    }
    #appContainer {
      display: none;
    }
    #planning div.seance {
      margin: 6px 0;
      padding: 6px 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #f5f5f5;
      text-align: left;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }
    #planning div.seance button.supprimerBtn {
      float: right;
      background-color: #e55b00;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      padding: 2px 8px;
      font-size: 0.9em;
    }
    #planning div.seance button.supprimerBtn:hover {
      background-color: #cc4c00;
    }
  </style>
</head>
<body>

<!-- Connexion -->
<div id="loginForm">
  <h2>Connexion √† Secret √âcole Zakaria</h2>
  <label>Nom d'utilisateur :</label><br>
  <input type="text" id="username" placeholder="Nom d'utilisateur" value="Niampa"><br><br>
  <label>Mot de passe :</label><br>
  <input type="password" id="password" placeholder="Mot de passe" value="4917"><br><br>
  <button onclick="connexion()">Se connecter</button>
</div>

<!-- Application -->
<div id="appContainer">
  <h1>Secret √âcole Zakaria</h1>

  <h2>üìò Mon Planning d'√âtude</h2>
  <label>Mati√®re :</label>
  <select id="matiere">
    <option>Maths</option>
    <option>Fran√ßais</option>
    <option>Histoire-G√©ographie</option>
    <option>Physique-Chimie</option>
    <option>SVT</option>
    <option>Anglais</option>
    <option>Allemand</option>
  </select>
  <label>Jour :</label>
  <select id="jour">
    <option>Lundi</option>
    <option>Mardi</option>
    <option>Mercredi</option>
    <option>Jeudi</option>
    <option>Vendredi</option>
    <option>Samedi</option>
    <option>Dimanche</option>
  </select>
  <label>Heure d√©but :</label>
  <input type="time" id="heureDebut" />
  <label>Dur√©e (minutes) :</label>
  <input type="number" id="duree" min="1" max="480" placeholder="90" />
  <button onclick="ajouterPlanning()">Ajouter √† mon planning</button>
  <div id="planning">
    <h3>üóìÔ∏è Mes s√©ances :</h3>
    <div id="liste"></div>
  </div>
  <div id="resume">‚è≥ Temps total d'√©tude cette semaine : 0 minutes</div>

  <!-- Moyenne -->
  <h2>üìä Calcul de la Moyenne G√©n√©rale</h2>
  <form id="formMoyenne" onsubmit="return false;">
    <table>
      <thead>
        <tr>
          <th>Mati√®re</th>
          <th>Coef</th>
          <th>Nb Ex</th>
          <th>Notes</th>
          <th>Moyenne</th>
          <th>Total</th>
        </tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>
    <div id="totaux">
      <p>Somme des Coefs : <span id="sommeCoef">0</span></p>
      <p>Somme des Totaux : <span id="sommeTotaux">0</span></p>
    </div>
    <button onclick="calculerMoyenne()">Calculer la moyenne</button>
  </form>
  <div id="resultat"></div>
</div>

<!-- Sons -->
<audio id="sonDebut" src="https://www.soundjay.com/buttons/sounds/button-16.mp3" preload="auto"></audio>
<audio id="sonFin" src="https://www.soundjay.com/button/beep-07.mp3" preload="auto"></audio>

<script>
  // --- Variables globales ---
  const STORAGE_PLANNING_KEY = "secretEcoleZakaria_planning";
  const STORAGE_NOTES_KEY = "secretEcoleZakaria_notes";

  // --- Connexion ---
  function connexion() {
    const user = document.getElementById("username").value.trim();
    const pass = document.getElementById("password").value.trim();
    if (user === "Niampa" && pass === "4917") {
      document.getElementById("loginForm").style.display = "none";
      document.getElementById("appContainer").style.display = "block";
      chargerPlanning();
      chargerNotes();
    } else {
      alert("Nom d'utilisateur ou mot de passe incorrect.");
    }
  }

  // --- Planning ---
  let planning = [];

  function timeToMinutes(t) {
    const [h, m] = t.split(":").map(Number);
    return h * 60 + m;
  }
  function minutesToTime(mins) {
    const h = Math.floor(mins / 60);
    const m = mins % 60;
    return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
  }

  // Affiche le planning dans #liste avec bouton supprimer
  function afficherPlanning() {
    const liste = document.getElementById('liste');
    liste.innerHTML = "";
    planning.forEach((seance, index) => {
      const div = document.createElement("div");
      div.className = "seance";
      div.textContent = `üìò ${seance.matiere} - üóìÔ∏è ${seance.jour} de ${seance.heureDebut} √† ${seance.heureFin} (${seance.duree} min)`;

      // Bouton supprimer √† c√¥t√©
      const btnSuppr = document.createElement("button");
      btnSuppr.textContent = "Supprimer";
      btnSuppr.className = "supprimerBtn";
      btnSuppr.onclick = () => {
        // Supprime la s√©ance sans r√©duire le temps total
        planning.splice(index, 1);
        sauvegarderPlanning();
        afficherPlanning();
        // Ne pas appeler miseAJourResume() pour garder le total intact
      };
      div.appendChild(btnSuppr);

      liste.appendChild(div);
    });
  }

  // Met √† jour le total des minutes (somme des dur√©es au moment de l'ajout)
  // Pour respecter la demande, on n'appelle plus cette fonction lors d'une suppression
  let totalMinutes = 0;
  function miseAJourResume() {
    // Recalcule total uniquement quand on ajoute (pas quand on supprime)
    totalMinutes = planning.reduce((s, e) => s + e.duree, 0);
    document.getElementById("resume").textContent = `‚è≥ Temps total d'√©tude cette semaine : ${totalMinutes} minutes`;
  }

  // Sauvegarde planning dans localStorage
  function sauvegarderPlanning() {
    localStorage.setItem(STORAGE_PLANNING_KEY, JSON.stringify(planning));
  }

  // Charge planning depuis localStorage
  function chargerPlanning() {
    const data = localStorage.getItem(STORAGE_PLANNING_KEY);
    if (data) {
      try {
        planning = JSON.parse(data);
      } catch {
        planning = [];
      }
    } else {
      planning = [];
    }
    afficherPlanning();
    // Ne pas remettre √† jour le total ici pour garder le total intact apr√®s suppression
    if (totalMinutes === 0) {
      // Au premier chargement, on calcule totalMinutes normalement
      totalMinutes = planning.reduce((s, e) => s + e.duree, 0);
    }
    document.getElementById("resume").textContent = `‚è≥ Temps total d'√©tude cette semaine : ${totalMinutes} minutes`;
  }

  // Ajouter une s√©ance au planning
  function ajouterPlanning() {
    const matiere = document.getElementById('matiere').value;
    const jour = document.getElementById('jour').value;
    const heureDebut = document.getElementById('heureDebut').value;
    const duree = parseInt(document.getElementById('duree').value);
    if (!heureDebut || isNaN(duree) || duree <= 0) {
      alert("Entrez une heure et une dur√©e valides.");
      return;
    }
    const debutMin = timeToMinutes(heureDebut);
    const finMin = debutMin + duree;
    if (finMin > 1440) {
      alert("Dur√©e trop longue !");
      return;
    }
    const heureFin = minutesToTime(finMin);
    // Ajout au planning
    planning.push({ matiere, jour, heureDebut, heureFin, duree });
    sauvegarderPlanning();
    afficherPlanning();
    // Ajout au totalMinutes mais on garde le total affich√© tel quel (par ta demande)
    totalMinutes += duree;
    document.getElementById("resume").textContent = `‚è≥ Temps total d'√©tude cette semaine : ${totalMinutes} minutes`;
    document.getElementById('sonDebut').play();
  }

  // --- Notifications de d√©but/fin s√©ances ---
  setInterval(() => {
    const now = new Date();
    const jours = ["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"];
    const j = jours[now.getDay()];
    const h = now.getHours().toString().padStart(2,'0') + ":" + now.getMinutes().toString().padStart(2,'0');
    planning.forEach(seance => {
      if (seance.jour === j) {
        if (seance.heureDebut === h) {
          document.getElementById("sonDebut").play();
          alert("üîî D√©but de " + seance.matiere);
        }
        if (seance.heureFin === h) {
          document.getElementById("sonFin").play();
          alert("‚úÖ Fin de " + seance.matiere);
        }
      }
    });
  }, 60000);

  // --- Moyennes et Notes ---
  const matieres = ["Maths", "Fran√ßais", "Histoire-G√©ographie", "Physique-Chimie", "SVT", "Anglais", "Allemand"];
  const tableBody = document.getElementById("tableBody");

  // Cr√©er tableau au chargement (avant connexion)
  matieres.forEach((m, i) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${m}</td>
      <td><input type="number" min="1" value="1" id="coef-${i}"></td>
      <td><input type="number" min="0" value="0" id="nbEx-${i}" onchange="genererInputsNotes(${i})"></td>
      <td><div class="notes-container" id="notes-${i}"></div></td>
      <td><span id="moyenne-${i}">0</span></td>
      <td><span id="total-${i}">0</span></td>
    `;
    tableBody.appendChild(tr);
  });

  // G√©n√®re les inputs notes selon le nb d'exos
  function genererInputsNotes(index) {
    const nb = parseInt(document.getElementById(`nbEx-${index}`).value);
    const container = document.getElementById(`notes-${index}`);
    container.innerHTML = "";
    for (let i = 0; i < nb; i++) {
      const input = document.createElement("input");
      input.type = "number";
      input.min = 0;
      input.max = 20;
      input.placeholder = `Note ${i+1}`;
      input.oninput = () => {
        calculerMoyennePartielle(index);
        sauvegarderNotes();
      };
      input.id = `note-${index}-${i}`;
      container.appendChild(input);
    }
  }

  // Calcule moyenne partielle par mati√®re
  function calculerMoyennePartielle(index) {
    const nb = parseInt(document.getElementById(`nbEx-${index}`).value);
    let total = 0, valid = 0;
    for (let i = 0; i < nb; i++) {
      const val = parseFloat(document.getElementById(`note-${index}-${i}`)?.value);
      if (!isNaN(val)) {
        total += val;
        valid++;
      }
    }
    const moy = valid ? total / valid : 0;
    const coef = parseFloat(document.getElementById(`coef-${index}`).value);
    const totalCoef = moy * coef;
    document.getElementById(`moyenne-${index}`).textContent = moy.toFixed(2);
    document.getElementById(`total-${index}`).textContent = totalCoef.toFixed(2);
  }

  // Calcule la moyenne g√©n√©rale
  function calculerMoyenne() {
    let sc = 0, st = 0;
    matieres.forEach((_, i) => {
      const coef = parseFloat(document.getElementById(`coef-${i}`).value);
      const total = parseFloat(document.getElementById(`total-${i}`).textContent);
      if (!isNaN(coef) && coef > 0) {
        sc += coef;
        st += total;
      }
    });
    const moyGen = sc ? (st / sc).toFixed(2) : 0;
    document.getElementById("sommeCoef").textContent = sc.toFixed(2);
    document.getElementById("sommeTotaux").textContent = st.toFixed(2);
    document.getElementById("resultat").textContent = `Moyenne G√©n√©rale Pond√©r√©e : ${moyGen} / 20`;
    sauvegarderNotes();
  }

  // --- Sauvegarde des notes/coefs dans localStorage ---
  function sauvegarderNotes() {
    const data = matieres.map((_, i) => {
      const coef = parseFloat(document.getElementById(`coef-${i}`).value) || 1;
      const nbEx = parseInt(document.getElementById(`nbEx-${i}`).value) || 0;
      const notes = [];
      for(let j=0; j<nbEx; j++) {
        const val = parseFloat(document.getElementById(`note-${i}-${j}`)?.value);
        notes.push(isNaN(val) ? null : val);
      }
      return { coef, nbEx, notes };
    });
    localStorage.setItem(STORAGE_NOTES_KEY, JSON.stringify(data));
  }

  function chargerNotes() {
    const dataRaw = localStorage.getItem(STORAGE_NOTES_KEY);
    if (!dataRaw) return;
    try {
      const data = JSON.parse(dataRaw);
      data.forEach((item, i) => {
        if(i >= matieres.length) return;
        document.getElementById(`coef-${i}`).value = item.coef ?? 1;
        document.getElementById(`nbEx-${i}`).value = item.nbEx ?? 0;
        genererInputsNotes(i);
        if(item.notes && Array.isArray(item.notes)) {
          item.notes.forEach((n, j) => {
            const input = document.getElementById(`note-${i}-${j}`);
            if(input && n !== null) input.value = n;
          });
        }
        calculerMoyennePartielle(i);
      });
      calculerMoyenne();
    } catch {}
  }

  // Sauvegarder automatiquement quand on change coef ou nbEx
  matieres.forEach((_, i) => {
    document.addEventListener("input", (e) => {
      if(e.target.id === `coef-${i}` || e.target.id === `nbEx-${i}`) {
        if(e.target.id === `nbEx-${i}`) genererInputsNotes(i);
        calculerMoyenne();
      }
    });
  });
</script>
</body>
</html>
